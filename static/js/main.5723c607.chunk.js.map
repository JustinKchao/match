{"version":3,"sources":["components/pattern/Pattern.module.scss","components/pattern/Pattern.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Pattern","text","pattern","useState","match1","setMatch1","styles","NotMatch","match1Style","setMatch1Style","timerRef","useRef","useEffect","current","clearTimeout","setTimeout","console","log","validate1","message","length","test","Match","Normal","className","Input","type","value","onChange","e","currentTarget","onKeyDown","key","preventDefault","App","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,MAAQ,uBAAuB,SAAW,0BAA0B,OAAS,0B,yLC4E/GC,EAjEC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAA4B,EACvBC,mBAAS,IADc,mBAC5CC,EAD4C,KACpCC,EADoC,OAEvBF,mBAAS,IAFc,gCAGbA,mBAASG,IAAOC,WAHH,mBAG5CC,EAH4C,KAG/BC,EAH+B,KAK7CC,EAAWC,iBAA8B,MAE/CC,qBAAU,WACiB,OAArBF,EAASG,SACXC,aAAaJ,EAASG,SAExBH,EAASG,QAAUE,YAAW,WAC5BC,QAAQC,IAAI,UAAWb,GACvBc,EAAU,kBArBa,OAuBxB,CAACd,IAEJ,IAAMc,EAAY,SAACC,GACjBH,QAAQC,IAAI,aAAcE,GACJ,IAAlBf,EAAOgB,QAIXJ,QAAQC,IAAIb,GAERF,EAAQmB,KAAKjB,IACfY,QAAQC,IAAI,SACZR,EAAeH,IAAOgB,SAEtBN,QAAQC,IAAI,aACZR,EAAeH,IAAOC,YAVtBE,EAAeH,IAAOiB,SA6B1B,OACE,6BACE,qDAA2BtB,GAC3B,8BACE,2BACEuB,UAAS,UAAKlB,IAAOmB,MAAZ,YAAqBjB,GAC9BkB,KAAK,OACLC,MAAOvB,EACPwB,SAvBe,SAACC,GACtBb,QAAQC,IAAI,SAAUb,GACtBC,EAAUwB,EAAEC,cAAcH,QAsBpBI,UAnBgB,SAACF,GA9CT,UA+CVA,EAAEG,MACqB,OAArBtB,EAASG,SACXC,aAAaJ,EAASG,SAExBgB,EAAEI,iBACFf,EAAU,kBClCDgB,MAnBf,WACE,OACE,yBAAKV,UAAU,MAAMW,MAAO,CAAEC,UAAW,SACvC,kBAAC,EAAD,CACEnC,KAAK,SACLC,QAAS,mDAEX,yBAAKiC,MAAO,CAAEC,UAAW,SACvB,kBAAC,EAAD,CACEnC,KAAK,eACLC,QACE,yGCHQmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMnC,c","file":"static/js/main.5723c607.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Pattern_Input__3JAQa\",\"Match\":\"Pattern_Match__3lBxp\",\"NotMatch\":\"Pattern_NotMatch__1H2GH\",\"Normal\":\"Pattern_Normal__2DjxO\"};","import React, { useState, useRef, useEffect } from \"react\";\n\nimport styles from \"./Pattern.module.scss\";\n\nconst WAIT_TIMEOUT: number = 300;\nconst ENTER_KEY = \"enter\";\n\ntype PatternProps = {\n  text: string;\n  pattern: RegExp;\n};\n\nconst Pattern = ({ text, pattern }: PatternProps) => {\n  const [match1, setMatch1] = useState(\"\");\n  const [match2, setMatch2] = useState(\"\");\n  const [match1Style, setMatch1Style] = useState(styles.NotMatch);\n\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (timerRef.current !== null) {\n      clearTimeout(timerRef.current);\n    }\n    timerRef.current = setTimeout(() => {\n      console.log(\"timeout\", match1);\n      validate1(\"from timeout\");\n    }, WAIT_TIMEOUT);\n  }, [match1]);\n\n  const validate1 = (message: string) => {\n    console.log(\"call from \", message);\n    if (match1.length === 0) {\n      setMatch1Style(styles.Normal);\n      return;\n    }\n    console.log(match1);\n    // const pattern = /^\\s*[3]\\s*[6]\\s*[0]\\s*[\\\\]*\\s*[p,P]\\s*[i,I]\\s*/;\n    if (pattern.test(match1)) {\n      console.log(\"match\");\n      setMatch1Style(styles.Match);\n    } else {\n      console.log(\"NOT match\");\n      setMatch1Style(styles.NotMatch);\n    }\n  };\n\n  const onMatch1Change = (e: React.FormEvent<HTMLInputElement>): void => {\n    console.log(\"change\", match1);\n    setMatch1(e.currentTarget.value);\n  };\n\n  const onMathc1KeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === ENTER_KEY) {\n      if (timerRef.current !== null) {\n        clearTimeout(timerRef.current);\n      }\n      e.preventDefault();\n      validate1(\"keydown\");\n    }\n  };\n\n  return (\n    <div>\n      <div>Check for variant of {text}</div>\n      <form>\n        <input\n          className={`${styles.Input} ${match1Style}`}\n          type=\"text\"\n          value={match1}\n          onChange={onMatch1Change}\n          onKeyDown={onMathc1KeyDown}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Pattern;\n","import React from \"react\";\nimport \"./App.css\";\nimport Pattern from \"./components/pattern/Pattern\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ marginTop: \"50px\" }}>\n      <Pattern\n        text=\"360 pi\"\n        pattern={/^\\s*[3]\\s*[6]\\s*[0]\\s*[\\\\]*\\s*[p,P]\\s*[i,I]\\s*/}\n      />\n      <div style={{ marginTop: \"50px\" }}>\n        <Pattern\n          text=\"(3x+5)(2x-1)\"\n          pattern={\n            /^\\s*[\\({\\[]\\s*[3]\\s*[x,X]\\s*[+]\\s*[5]*\\s*[\\)}\\]]\\s*[\\({\\[]\\s*[2]\\s*[x,X]\\s*[-]\\s*[1]\\s*[\\)}\\]]\\s*/\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}